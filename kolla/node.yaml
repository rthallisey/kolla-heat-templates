heat_template_version: 2015-04-30
description: >
  OpenStack node deployment for Kolla.

parameters:
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  Flavor:
    description: Flavor for the nova compute node
    type: string
    default: baremetal
    constraints:
      - custom_constraint: nova.flavor
  Hostname:
    type: string
    default: '' # Defaults to Heat created hostname
  HostnameMap:
    type: json
    default: {}
    description: Optional mapping to override hostnames
  Image:
    type: string
    default: atomic-image
    constraints:
      - custom_constraint: glance.image
  KeyName:
    description: Name of an existing Nova key pair to enable SSH access to the instances
    type: string
    default: default
    constraints:
      - custom_constraint: nova.keypair
  PublicVirtualIP:
    type: string
    default: ''  # Has to be here because of the ignored empty value bug
  PublicVirtualInterface:
    default: 'br-ex'
    description: >
        Specifies the interface where the public-facing virtual ip will be assigned.
        This should be int_public when a VLAN is being used.
    type: string
  VirtualIP: # DEPRECATED: use per service settings instead
    type: string
    default: ''  # Has to be here because of the ignored empty value bug

# Network Isolation Variables
  NodeIPs:
    default: {}
    type: json
  NeutronPhysicalBridge:
    default: 'br-ex'
    description: An OVS bridge to create for accessing external networks.
    type: string
  NeutronPublicInterface:
    default: nic1
    description: A port to add to the NeutronPhysicalBridge.
    type: string
  NetworkDeploymentActions:
    type: comma_delimited_list
    description: >
      Heat action when to apply network configuration changes
    default: ['CREATE']

resources:

  Node:
    type: OS::Nova::Server
    properties:
      image:
        {get_param: Image}
      flavor: {get_param: Flavor}
      key_name: {get_param: KeyName}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: UserData}
      name:
        str_replace:
            template: {get_param: Hostname}
            params: {get_param: HostnameMap}
      networks:
        - network: ctlplane

  # Combine the NodeAdminUserData and NodeUserData mime archives
  UserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart

  # Creates the "heat-admin" user if configured via the environment
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeAdminUserData:
    type: OS::TripleO::NodeAdminUserData

  # For optional operator additional userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeUserData:
    type: OS::TripleO::NodeUserData

  ExternalPort:
    type: OS::TripleO::Compute::Ports::ExternalPort
    properties:
      ControlPlaneIP: {get_attr: [Node, networks, ctlplane, 0]}
      IPPool: {get_param: NodeIPs}

  InternalApiPort:
    type: OS::TripleO::Compute::Ports::InternalApiPort
    properties:
      ControlPlaneIP: {get_attr: [Node, networks, ctlplane, 0]}
      IPPool: {get_param: NodeIPs}

  StoragePort:
    type: OS::TripleO::Compute::Ports::StoragePort
    properties:
      ControlPlaneIP: {get_attr: [Node, networks, ctlplane, 0]}
      IPPool: {get_param: NodeIPs}

  StorageMgmtPort:
    type: OS::TripleO::Compute::Ports::StorageMgmtPort
    properties:
      ControlPlaneIP: {get_attr: [Node, networks, ctlplane, 0]}
      IPPool: {get_param: NodeIPs}

  TenantPort:
    type: OS::TripleO::Compute::Ports::TenantPort
    properties:
      ControlPlaneIP: {get_attr: [Node, networks, ctlplane, 0]}
      IPPool: {get_param: NodeIPs}

  ManagementPort:
    type: OS::TripleO::Compute::Ports::ManagementPort
    properties:
      ControlPlaneIP: {get_attr: [Node, networks, ctlplane, 0]}
      IPPool: {get_param: NodeIPs}

  NetworkConfig:
    type: OS::TripleO::Compute::Net::SoftwareConfig
    properties:
      ControlPlaneIp: {get_attr: [Node, networks, ctlplane, 0]}
      ExternalIpSubnet: {get_attr: [ExternalPort, ip_subnet]}
      InternalApiIpSubnet: {get_attr: [InternalApiPort, ip_subnet]}
      StorageIpSubnet: {get_attr: [StoragePort, ip_subnet]}
      StorageMgmtIpSubnet: {get_attr: [StorageMgmtPort, ip_subnet]}
      TenantIpSubnet: {get_attr: [TenantPort, ip_subnet]}
      ManagementIpSubnet: {get_attr: [ManagementPort, ip_subnet]}

  NetworkDeployment:
    type: OS::TripleO::SoftwareDeployment
    depends_on: Node
    properties:
      name: NetworkDeployment
      config: {get_resource: NetworkConfig}
      server: {get_resource: Node}
      actions: {get_param: NetworkDeploymentActions}
      input_values:
        bridge_name: {get_param: NeutronPhysicalBridge}
        interface_name: {get_param: NeutronPublicInterface}


outputs:
  ip_address:
    description: IP address of the server in the ctlplane network
    value: {get_attr: [Node, networks, ctlplane, 0]}
  nova_server_resource:
    description: Heat resource handle for the Nova compute server
    value:
      {get_resource: Node}
