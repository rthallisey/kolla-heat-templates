heat_template_version: 2015-04-30
description: >
  OpenStack node deployment for Kolla.

parameters:
  Image:
    type: string
    default: atomic-image
    constraints:
      - custom_constraint: glance.image
  Flavor:
    description: Flavor for the nova compute node
    type: string
    default: baremetal
    constraints:
      - custom_constraint: nova.flavor
  KeyName:
    description: Name of an existing Nova key pair to enable SSH access to the instances
    type: string
    default: default
    constraints:
      - custom_constraint: nova.keypair
  Hostname:
    type: string
    default: '' # Defaults to Heat created hostname
  HostnameMap:
    type: json
    default: {}
    description: Optional mapping to override hostnames

resources:

  Node:
    type: OS::Nova::Server
    properties:
      image:
        {get_param: Image}
      flavor: {get_param: Flavor}
      key_name: {get_param: KeyName}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: UserData}
      name:
        str_replace:
            template: {get_param: Hostname}
            params: {get_param: HostnameMap}
      networks:
        - network: ctlplane

  # Combine the NodeAdminUserData and NodeUserData mime archives
  UserData:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: NodeAdminUserData}
        type: multipart
      - config: {get_resource: NodeUserData}
        type: multipart

  # Creates the "heat-admin" user if configured via the environment
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeAdminUserData:
    type: OS::TripleO::NodeAdminUserData

  # For optional operator additional userdata
  # Should return a OS::Heat::MultipartMime reference via OS::stack_id
  NodeUserData:
    type: OS::TripleO::NodeUserData

  # VerifyCompleteDeployment:
  #   type: OS::Heat::SoftwareDeployments
  #   depends_on: Node
  #   properties:
  #     name: VerifyCompleteDeployment
  #     config: {get_resource: VerifyCompleteConfig}
  #     servers: {get_resource: Node}
  #
  # VerifyCompleteConfig:
  #   type: OS::Heat::SoftwareConfig
  #   properties:
  #     group: script
  #     outputs:
  #     - name: result
  #     config: |
  #       #!/bin/bash
  #       /bin/true

outputs:
  ip_address:
    description: IP address of the server in the ctlplane network
    value: {get_attr: [Node, networks, ctlplane, 0]}
